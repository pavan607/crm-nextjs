{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20org/crm/app/lib/db.js"],"sourcesContent":["// lib/db.js\r\nimport mysql from 'mysql2/promise';\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || 'root',\r\n  database: process.env.DB_NAME || 'crm',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;;AAEA,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20org/crm/app/api/enquiry/edit/%5BenquiryId%5D/route.ts"],"sourcesContent":["// /api/enquiry/[enquiryId]/edit/route.ts\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport pool from '../../../../lib/db';\r\nimport { ResultSetHeader, RowDataPacket } from 'mysql2';\r\nimport { writeFile, mkdir } from 'fs/promises';\r\nimport path from 'path';\r\nimport { unlink } from 'fs/promises';\r\n\r\ninterface EnquiryProduct {\r\n  id?: string | number;\r\n  crmtf_product_id: number; // Fixed: Use consistent naming\r\n  crm_quantity: number;      // Fixed: Use consistent naming\r\n  crm_price: number;         // Fixed: Use consistent naming\r\n  session_flag?: 'A' | 'E' | 'D' | null;\r\n}\r\n\r\ninterface ProductOperations {\r\n  add: EnquiryProduct[];\r\n  edit: EnquiryProduct[];\r\n  delete: EnquiryProduct[];\r\n  unchanged: EnquiryProduct[];\r\n}\r\n\r\n// GET handler for fetching lead data for editing\r\nexport async function GET(\r\n  req: NextRequest,\r\n  { params }: { params: Promise<{ enquiryId: string }> }\r\n) {\r\n  console.log('üìñ === GET LEAD FOR EDIT STARTED ===');\r\n  \r\n  try {\r\n    // Await params before using\r\n    const resolvedParams = await params;\r\n    const enquiryId = Number(resolvedParams.enquiryId);\r\n    console.log('üî¢ Parsed enquiryId:', enquiryId);\r\n    \r\n    if (isNaN(enquiryId) || enquiryId <= 0) {\r\n      console.log('‚ùå Invalid Lead ID');\r\n      return NextResponse.json({ message: 'Invalid Lead ID' }, { status: 400 });\r\n    }\r\n\r\n    const connection = await pool.getConnection();\r\n    \r\n    try {\r\n      // Fetch lead data with employee info - Fixed field names\r\n      const [leadRows] = await connection.execute<RowDataPacket[]>(\r\n        `SELECT\r\n          e.enquiry_id as crm_enquiry_id,\r\n          e.enquiry_number as crm_enquiry_number,\r\n          e.enquiry_name as crm_opportunity_name,\r\n          e.enquiry_contact_name as crm_contact_name,\r\n          e.enquiry_type as crm_type,\r\n          e.enquiry_source as crm_lead_source,\r\n          e.enquiry_assigned_to as crm_assigned_to,\r\n          e.enquiry_campaign_source as crm_campaign_source,\r\n          e.enquiry_weighted_revenue as crm_weighted_revenue,\r\n          e.enquiry_organization_name as crm_organization_name,\r\n          e.enquiry_amount as crm_amount,\r\n          e.enquiry_expected_close_date as crm_expected_close_date,\r\n          e.enquiry_close_date as crm_close_date,\r\n          e.enquiry_next_step as crm_next_step,\r\n          e.enquiry_sales_stage as crm_sales_stage,\r\n          e.enquiry_probability as crm_probability,\r\n          e.enquiry_description as crm_description,\r\n          emp.employee_first_name,\r\n          emp.employee_last_name,\r\n          CONCAT(emp.employee_first_name, ' ', emp.employee_last_name) as assignedToName\r\n         FROM crm_enquiry e\r\n         LEFT JOIN crm_employee emp ON e.enquiry_assigned_to = emp.employee_id\r\n         WHERE e.enquiry_id = ?`,\r\n        [enquiryId]\r\n      );\r\n\r\n      console.log('‚úÖ Lead data fetched:', leadRows.length, 'rows found');\r\n      if (leadRows.length === 0) {\r\n        return NextResponse.json({ message: 'Lead not found' }, { status: 404 });\r\n      }\r\n\r\n      const lead = leadRows[0];\r\n\r\n      // Fetch attachments - Fixed field names\r\n      const [attachmentRows] = await connection.execute<RowDataPacket[]>(\r\n        `SELECT \r\n          enquiry_attachment_id as crm_attachment_id,\r\n          enquiry_attachment_file_name as file_name,\r\n          enquiry_attachment_file_path as file_path,\r\n          enquiry_attachment_uploaded_on\r\n         FROM crm_enquiry_attachment \r\n         WHERE enquiry_id = ?\r\n         ORDER BY enquiry_attachment_uploaded_on DESC`,\r\n        [enquiryId]\r\n      );\r\n      console.log('‚úÖ Attachments fetched:', attachmentRows.length, 'attachments found');\r\n\r\n      // Fetch comments - Fixed field names\r\n      const [commentRows] = await connection.execute<RowDataPacket[]>(\r\n        `SELECT\r\n          c.enquiry_comment_text as comment_text,\r\n          c.enquiry_comment_commented_on as commented_on,\r\n          CONCAT(emp.employee_first_name, ' ', emp.employee_last_name) as commented_by_name\r\n         FROM crm_enquiry_comment c\r\n         LEFT JOIN crm_employee emp ON c.enquiry_comment_commented_by = emp.employee_id\r\n         WHERE c.enquiry_id = ?\r\n         ORDER BY c.enquiry_comment_commented_on DESC`,\r\n        [enquiryId]\r\n      );\r\n\r\n      // Fetch products - Fixed field names to match frontend expectations\r\n      const [productRows] = await connection.execute<RowDataPacket[]>(\r\n        `SELECT \r\n          ep.enquiry_product_id,\r\n          ep.product_id as crmtf_product_id,\r\n          ep.enquiry_product_quantity as crm_quantity,\r\n          ep.enquiry_product_price as crm_price,\r\n          p.product_name as crmtf_product_name,\r\n          p.product_code as crmtf_product_code,\r\n          p.product_type as crmtf_product_type,\r\n          p.product_model_number as crmtf_product_model_number,\r\n          p.product_uom as crmtf_product_uom\r\n         FROM crm_enquiry_product ep\r\n         LEFT JOIN crm_product p ON ep.product_id = p.product_id\r\n         WHERE ep.enquiry_id = ?`,\r\n        [enquiryId]\r\n      );\r\n      console.log('‚úÖ Product data fetched:', productRows.length, 'products found');\r\n      \r\n      // Structure the response with consistent naming\r\n      const response = {\r\n        ...lead,\r\n        attachments: attachmentRows,\r\n        comments: commentRows,\r\n        products: productRows\r\n      };\r\n\r\n      console.log('‚úÖ Lead data fetched successfully');\r\n      return NextResponse.json(response);\r\n\r\n    } finally {\r\n      connection.release();\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error fetching lead:', error);\r\n    return NextResponse.json(\r\n      { \r\n        message: 'Failed to fetch lead data',\r\n        error: (error as Error).message \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT handler for updating lead data\r\n// PUT handler for updating lead data - FIXED VERSION\r\nexport async function PUT(\r\n  req: NextRequest,\r\n  { params }: { params: Promise<{ enquiryId: string }> }\r\n) {\r\n  console.log('üöÄ === EDIT API HANDLER STARTED ===');\r\n  \r\n  try {\r\n    // Await params before using\r\n    const resolvedParams = await params;\r\n    const enquiryId = Number(resolvedParams.enquiryId);\r\n    console.log('üî¢ Parsed enquiryId:', enquiryId);\r\n    \r\n    if (isNaN(enquiryId) || enquiryId <= 0) {\r\n      console.log('‚ùå Invalid Lead ID');\r\n      return NextResponse.json({ error: 'Invalid Lead ID' }, { status: 400 });\r\n    }\r\n\r\n    console.log('üîå Getting database connection...');\r\n    const connection = await pool.getConnection();\r\n    console.log('‚úÖ Database connection acquired');\r\n\r\n    try {\r\n      console.log('üîÑ Starting transaction...');\r\n      await connection.beginTransaction();\r\n      console.log('‚úÖ Transaction started');\r\n\r\n      // Parse form data\r\n      console.log('üìã Parsing form data...');\r\n      const formData = await req.formData();\r\n      console.log('‚úÖ Form data parsed');\r\n\r\n      // Extract and process modified_by field\r\n      const modifiedBy = formData.get('modified_by') as string;\r\n      const modifiedByEmployeeId = modifiedBy ? Number(modifiedBy) : null;\r\n      console.log('üî¢ Parsed modifiedByEmployeeId:', modifiedByEmployeeId);\r\n\r\n      // Handle main form fields\r\n      const updateFields = [];\r\n      const updateValues = [];\r\n\r\n      // Add modified_on and modified_by fields FIRST\r\n      updateFields.push('enquiry_modified_on = NOW()');\r\n\r\n      if (modifiedByEmployeeId && !isNaN(modifiedByEmployeeId) && modifiedByEmployeeId > 0) {\r\n        updateFields.push('enquiry_modified_by = ?');\r\n        updateValues.push(modifiedByEmployeeId);\r\n        console.log('‚úÖ Modified by field added:', modifiedByEmployeeId);\r\n      }\r\n\r\n      // FIXED field mappings - using correct database column names\r\n      const fieldMappings = {\r\n        'crm_enquiry_number': 'enquiry_number',      // FIXED: Added missing field\r\n        'opportunityName': 'enquiry_name',\r\n        'contactName': 'enquiry_contact_name',\r\n        'type': 'enquiry_type',\r\n        'leadSource': 'enquiry_source',\r\n        'assignedTo': 'enquiry_assigned_to',\r\n        'campaignSource': 'enquiry_campaign_source',\r\n        'weightedRevenue': 'enquiry_weighted_revenue',\r\n        'organizationName': 'enquiry_organization_name',\r\n        'amount': 'enquiry_amount',\r\n        'expectedCloseDate': 'enquiry_expected_close_date',\r\n        'nextStep': 'enquiry_next_step',\r\n        'salesStage': 'enquiry_sales_stage',\r\n        'probability': 'enquiry_probability',\r\n        'description': 'enquiry_description'\r\n      };\r\n\r\n      for (const [formField, dbField] of Object.entries(fieldMappings)) {\r\n        const value = formData.get(formField) as string | null;\r\n        \r\n        if (value !== null && value !== '') {\r\n          updateFields.push(`${dbField} = ?`);\r\n          \r\n          // Handle numeric fields properly\r\n          if (['enquiry_assigned_to', 'enquiry_weighted_revenue', 'enquiry_amount', 'enquiry_probability'].includes(dbField)) {\r\n            const numValue = Number(value);\r\n            updateValues.push(isNaN(numValue) ? null : numValue);\r\n          } else {\r\n            updateValues.push(value.trim());\r\n          }\r\n          \r\n          console.log(`üìù Field mapping: ${formField} -> ${dbField} = ${value}`);\r\n        }\r\n      }\r\n\r\n      // Handle actualCloseDate separately with better validation\r\n      const actualCloseDate = formData.get('actualCloseDate') as string | null;\r\n      updateFields.push('enquiry_close_date = ?');\r\n      \r\n      if (!actualCloseDate || actualCloseDate.trim() === '') {\r\n        updateValues.push(null);\r\n        console.log('üìù Close date set to NULL');\r\n      } else {\r\n        // Validate date format\r\n        const dateValue = actualCloseDate.trim();\r\n        if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateValue)) {\r\n          updateValues.push(dateValue);\r\n          console.log(`üìù Close date set to: ${dateValue}`);\r\n        } else {\r\n          updateValues.push(null);\r\n          console.log('‚ö†Ô∏è Invalid date format, setting to NULL');\r\n        }\r\n      }\r\n\r\n      // Update the main enquiry record\r\n      if (updateFields.length > 0) {\r\n        console.log('üíæ Updating main enquiry record...');\r\n        updateValues.push(enquiryId);\r\n        \r\n        const updateQuery = `\r\n          UPDATE crm_enquiry \r\n          SET ${updateFields.join(', ')} \r\n          WHERE enquiry_id = ?\r\n        `;\r\n        \r\n        console.log('üîç Update query:', updateQuery);\r\n        console.log('üîç Update values:', updateValues);\r\n        \r\n        const [updateResult] = await connection.execute<ResultSetHeader>(updateQuery, updateValues);\r\n        console.log('‚úÖ Main record updated:', {\r\n          affectedRows: updateResult.affectedRows,\r\n          changedRows: updateResult.changedRows\r\n        });\r\n\r\n        if (updateResult.affectedRows === 0) {\r\n          throw new Error('Lead not found or no changes made');\r\n        }\r\n      }\r\n\r\n      // Handle product operations - IMPROVED LOGIC\r\n      console.log('üì¶ Processing product operations...');\r\n      const productOperationsStr = formData.get('productOperations') as string;\r\n      \r\n      if (productOperationsStr) {\r\n        try {\r\n          const productOperations: ProductOperations = JSON.parse(productOperationsStr);\r\n          console.log('üì¶ Parsed product operations:', {\r\n            add: productOperations.add?.length || 0,\r\n            edit: productOperations.edit?.length || 0,\r\n            delete: productOperations.delete?.length || 0,\r\n            unchanged: productOperations.unchanged?.length || 0\r\n          });\r\n\r\n          // Process DELETE operations first - SIMPLIFIED LOGIC\r\n          if (productOperations.delete && productOperations.delete.length > 0) {\r\n            console.log('üóëÔ∏è Processing DELETE operations...');\r\n            for (const product of productOperations.delete) {\r\n              console.log('üóëÔ∏è Deleting product:', product);\r\n              \r\n              // IMPROVED: Use product_id for deletion to avoid ID confusion\r\n              const [result] = await connection.execute<ResultSetHeader>(\r\n                `DELETE FROM crm_enquiry_product \r\n                 WHERE enquiry_id = ? AND product_id = ?`,\r\n                [enquiryId, product.crmtf_product_id]\r\n              );\r\n              console.log('‚úÖ Product deleted:', { \r\n                productId: product.crmtf_product_id, \r\n                affectedRows: result.affectedRows \r\n              });\r\n            }\r\n          }\r\n\r\n          // Process EDIT operations - IMPROVED LOGIC\r\n          if (productOperations.edit && productOperations.edit.length > 0) {\r\n            console.log('‚úèÔ∏è Processing EDIT operations...');\r\n            for (const product of productOperations.edit) {\r\n              console.log('‚úèÔ∏è Editing product:', product);\r\n              \r\n              // IMPROVED: Use enquiry_id + product_id for reliable updates\r\n              const [updateResult] = await connection.execute<ResultSetHeader>(\r\n                `UPDATE crm_enquiry_product \r\n                 SET enquiry_product_quantity = ?, \r\n                     enquiry_product_price = ?, \r\n                     enquiry_product_modified_on = NOW()\r\n                 WHERE enquiry_id = ? AND product_id = ?`,\r\n                [\r\n                  product.crm_quantity || 1,\r\n                  product.crm_price || 0,\r\n                  enquiryId,\r\n                  product.crmtf_product_id\r\n                ]\r\n              );\r\n              \r\n              console.log('‚úÖ Product updated:', {\r\n                productId: product.crmtf_product_id,\r\n                affectedRows: updateResult.affectedRows\r\n              });\r\n            }\r\n          }\r\n\r\n          // Process ADD operations - IMPROVED DUPLICATE CHECK\r\n          if (productOperations.add && productOperations.add.length > 0) {\r\n            console.log('‚ûï Processing ADD operations...');\r\n            for (const product of productOperations.add) {\r\n              console.log('‚ûï Adding product:', product);\r\n              \r\n              // Check if product already exists to avoid duplicates\r\n              const [existingRows] = await connection.execute<RowDataPacket[]>(\r\n                `SELECT enquiry_product_id FROM crm_enquiry_product \r\n                 WHERE enquiry_id = ? AND product_id = ?`,\r\n                [enquiryId, product.crmtf_product_id]\r\n              );\r\n\r\n              if (existingRows.length > 0) {\r\n                console.log('‚ö†Ô∏è Product already exists, updating instead of adding');\r\n                // Update existing instead of skipping\r\n                await connection.execute<ResultSetHeader>(\r\n                  `UPDATE crm_enquiry_product \r\n                   SET enquiry_product_quantity = ?, \r\n                       enquiry_product_price = ?, \r\n                       enquiry_product_modified_on = NOW()\r\n                   WHERE enquiry_id = ? AND product_id = ?`,\r\n                  [\r\n                    product.crm_quantity || 1,\r\n                    product.crm_price || 0,\r\n                    enquiryId,\r\n                    product.crmtf_product_id\r\n                  ]\r\n                );\r\n                console.log('‚úÖ Existing product updated instead');\r\n                continue;\r\n              }\r\n\r\n              // Insert new product\r\n              const [result] = await connection.execute<ResultSetHeader>(\r\n                `INSERT INTO crm_enquiry_product \r\n                 (enquiry_id, product_id, enquiry_product_quantity, enquiry_product_price, enquiry_product_created_on, enquiry_product_modified_on)\r\n                 VALUES (?, ?, ?, ?, NOW(), NOW())`,\r\n                [\r\n                  enquiryId,\r\n                  product.crmtf_product_id,\r\n                  product.crm_quantity || 1,\r\n                  product.crm_price || 0,\r\n                ]\r\n              );\r\n              \r\n              console.log('‚úÖ Product added:', {\r\n                insertId: result.insertId,\r\n                affectedRows: result.affectedRows\r\n              });\r\n            }\r\n          }\r\n\r\n        } catch (productParseError) {\r\n          console.error('‚ùå Error parsing product operations:', productParseError);\r\n          throw new Error('Invalid product operations data');\r\n        }\r\n      }\r\n\r\n      // Handle comment if provided - IMPROVED VALIDATION\r\n      const comment = formData.get('comment') as string;\r\n      if (comment && comment.trim()) {\r\n        console.log('üí¨ Adding comment:', comment.trim());\r\n\r\n        const [commentResult] = await connection.execute<ResultSetHeader>(\r\n          `INSERT INTO crm_enquiry_comment \r\n           (enquiry_id, enquiry_comment_text, enquiry_comment_commented_by, enquiry_comment_commented_on) \r\n           VALUES (?, ?, ?, NOW())`,\r\n          [enquiryId, comment.trim(), modifiedByEmployeeId || null]\r\n        );\r\n\r\n        console.log('‚úÖ Comment added successfully:', {\r\n          insertId: commentResult.insertId,\r\n          affectedRows: commentResult.affectedRows\r\n        });\r\n\r\n        // Update the enquiry_comments field with the latest comment\r\n        await connection.execute(\r\n          `UPDATE crm_enquiry \r\n           SET enquiry_comments = ? \r\n           WHERE enquiry_id = ?`,\r\n          [comment.trim(), enquiryId]\r\n        );\r\n\r\n        console.log('‚úÖ enquiry_comments field updated');\r\n      }\r\n\r\n      // Handle file attachments - IMPROVED ERROR HANDLING\r\n      const attachments = formData.getAll('attachments') as File[];\r\n      if (attachments.length > 0 && attachments[0].size > 0) {\r\n        console.log('üìé Processing attachments:', attachments.length);\r\n        \r\n        const uploadsDir = path.join(process.cwd(), 'public', 'uploads', 'enquiry', enquiryId.toString());\r\n        \r\n        try {\r\n          await mkdir(uploadsDir, { recursive: true });\r\n          console.log('üìÅ Upload directory created/verified');\r\n        } catch (dirError) {\r\n          console.error('‚ùå Error creating upload directory:', dirError);\r\n          throw new Error('Failed to create upload directory');\r\n        }\r\n\r\n        for (const file of attachments) {\r\n          if (file.size > 0) {\r\n            try {\r\n              // IMPROVED: Better filename sanitization\r\n              const fileExtension = path.extname(file.name);\r\n              const baseFileName = path.basename(file.name, fileExtension)\r\n                .replace(/[^a-zA-Z0-9._-]/g, '_') // Sanitize filename\r\n                .substring(0, 100); // Limit length\r\n              const timestamp = Date.now();\r\n              const uniqueFileName = `${baseFileName}_${timestamp}${fileExtension}`;\r\n              const filePath = path.join(uploadsDir, uniqueFileName);\r\n              \r\n              // Validate file size (e.g., max 10MB)\r\n              if (file.size > 10 * 1024 * 1024) {\r\n                throw new Error(`File ${file.name} is too large (max 10MB)`);\r\n              }\r\n              \r\n              // Save file\r\n              const bytes = await file.arrayBuffer();\r\n              const buffer = Buffer.from(bytes);\r\n              await writeFile(filePath, buffer);\r\n              console.log('‚úÖ File saved:', uniqueFileName);\r\n\r\n              // Save to database with better error handling\r\n              const relativePath = `/uploads/enquiry/${enquiryId}/${uniqueFileName}`;\r\n              \r\n              const [attachmentResult] = await connection.execute<ResultSetHeader>(\r\n                `INSERT INTO crm_enquiry_attachment \r\n                 (enquiry_id, enquiry_attachment_file_name, enquiry_attachment_file_path, enquiry_attachment_uploaded_on, enquiry_attachment_uploaded_by) \r\n                 VALUES (?, ?, ?, NOW(), ?)`,\r\n                [enquiryId, file.name, relativePath, modifiedByEmployeeId || null]\r\n              );\r\n\r\n              console.log('‚úÖ File record inserted:', {\r\n                insertId: attachmentResult.insertId,\r\n                affectedRows: attachmentResult.affectedRows\r\n              });\r\n            } catch (fileError) {\r\n              console.error('‚ùå Error processing file:', file.name, fileError);\r\n              throw new Error(`Failed to process file: ${file.name} - ${(fileError as Error).message}`);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // Handle deleted attachments - IMPROVED ERROR HANDLING\r\n      const deletedAttachmentIdsStr = formData.get('deletedAttachmentIds') as string;\r\n      if (deletedAttachmentIdsStr) {\r\n        console.log('üóëÔ∏è Processing attachment deletions...');\r\n        \r\n        try {\r\n          const deletedIds: number[] = JSON.parse(deletedAttachmentIdsStr);\r\n          console.log('üóëÔ∏è Attachment IDs to delete:', deletedIds);\r\n          \r\n          for (const attachmentId of deletedIds) {\r\n            // IMPROVED: Better validation of attachment ownership\r\n            const [attachmentRows] = await connection.execute<RowDataPacket[]>(\r\n              `SELECT enquiry_attachment_file_path \r\n               FROM crm_enquiry_attachment \r\n               WHERE enquiry_attachment_id = ? AND enquiry_id = ?`,\r\n              [attachmentId, enquiryId]\r\n            );\r\n            \r\n            if (attachmentRows.length > 0) {\r\n              const filePath = attachmentRows[0].enquiry_attachment_file_path;\r\n              \r\n              // Delete from database\r\n              const [deleteResult] = await connection.execute<ResultSetHeader>(\r\n                `DELETE FROM crm_enquiry_attachment \r\n                 WHERE enquiry_attachment_id = ? AND enquiry_id = ?`,\r\n                [attachmentId, enquiryId]\r\n              );\r\n              \r\n              console.log('‚úÖ Attachment deleted from database:', {\r\n                attachmentId,\r\n                affectedRows: deleteResult.affectedRows\r\n              });\r\n              \r\n              // Delete physical file - IMPROVED ERROR HANDLING\r\n              if (deleteResult.affectedRows > 0 && filePath) {\r\n                try {\r\n                  const fullFilePath = path.join(process.cwd(), 'public', filePath);\r\n                  await unlink(fullFilePath);\r\n                  console.log('‚úÖ Physical file deleted');\r\n                } catch (fileDeleteError) {\r\n                  console.warn('‚ö†Ô∏è Could not delete physical file (may not exist):', fileDeleteError);\r\n                  // Don't throw error for file deletion failures\r\n                }\r\n              }\r\n            } else {\r\n              console.warn('‚ö†Ô∏è Attachment not found or not owned by this enquiry:', attachmentId);\r\n            }\r\n          }\r\n        } catch (parseError) {\r\n          console.error('‚ùå Error parsing deleted attachment IDs:', parseError);\r\n          throw new Error('Invalid deleted attachment IDs data');\r\n        }\r\n      }\r\n\r\n      console.log('üîÑ Committing transaction...');\r\n      await connection.commit();\r\n      console.log('‚úÖ Transaction committed successfully');\r\n      \r\n      // IMPROVED: Return more detailed success response\r\n      return NextResponse.json({ \r\n        success: true, \r\n        message: 'Lead updated successfully',\r\n        enquiryId: enquiryId,\r\n        timestamp: new Date().toISOString()\r\n      });\r\n\r\n    } catch (error) {\r\n      console.log('üîÑ Rolling back transaction...');\r\n      await connection.rollback();\r\n      console.log('‚ùå Transaction rolled back');\r\n      throw error;\r\n    } finally {\r\n      connection.release();\r\n      console.log('üîå Database connection released');\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('‚ùå Error in edit API handler:', error);\r\n    \r\n    // IMPROVED: More specific error messages\r\n    let errorMessage = 'Failed to update lead';\r\n    let statusCode = 500;\r\n    \r\n    if (error instanceof Error) {\r\n      if (error.message.includes('Lead not found')) {\r\n        errorMessage = 'Lead not found';\r\n        statusCode = 404;\r\n      } else if (error.message.includes('Invalid')) {\r\n        errorMessage = error.message;\r\n        statusCode = 400;\r\n      } else if (error.message.includes('too large')) {\r\n        errorMessage = error.message;\r\n        statusCode = 413;\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json({ \r\n      error: errorMessage, \r\n      details: (error as Error).message,\r\n      timestamp: new Date().toISOString()\r\n    }, { status: statusCode });\r\n  }\r\n}"],"names":[],"mappings":"AAAA,yCAAyC;;;;;AACzC;AACA;AAEA;AACA;;;;;;AAmBO,eAAe,IACpB,GAAgB,EAChB,EAAE,MAAM,EAA8C;IAEtD,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,4BAA4B;QAC5B,MAAM,iBAAiB,MAAM;QAC7B,MAAM,YAAY,OAAO,eAAe,SAAS;QACjD,QAAQ,GAAG,CAAC,wBAAwB;QAEpC,IAAI,MAAM,cAAc,aAAa,GAAG;YACtC,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,MAAM,aAAa,MAAM,kHAAA,CAAA,UAAI,CAAC,aAAa;QAE3C,IAAI;YACF,yDAAyD;YACzD,MAAM,CAAC,SAAS,GAAG,MAAM,WAAW,OAAO,CACzC,CAAC;;;;;;;;;;;;;;;;;;;;;;;+BAuBsB,CAAC,EACxB;gBAAC;aAAU;YAGb,QAAQ,GAAG,CAAC,wBAAwB,SAAS,MAAM,EAAE;YACrD,IAAI,SAAS,MAAM,KAAK,GAAG;gBACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,SAAS;gBAAiB,GAAG;oBAAE,QAAQ;gBAAI;YACxE;YAEA,MAAM,OAAO,QAAQ,CAAC,EAAE;YAExB,wCAAwC;YACxC,MAAM,CAAC,eAAe,GAAG,MAAM,WAAW,OAAO,CAC/C,CAAC;;;;;;;qDAO4C,CAAC,EAC9C;gBAAC;aAAU;YAEb,QAAQ,GAAG,CAAC,0BAA0B,eAAe,MAAM,EAAE;YAE7D,qCAAqC;YACrC,MAAM,CAAC,YAAY,GAAG,MAAM,WAAW,OAAO,CAC5C,CAAC;;;;;;;qDAO4C,CAAC,EAC9C;gBAAC;aAAU;YAGb,oEAAoE;YACpE,MAAM,CAAC,YAAY,GAAG,MAAM,WAAW,OAAO,CAC5C,CAAC;;;;;;;;;;;;gCAYuB,CAAC,EACzB;gBAAC;aAAU;YAEb,QAAQ,GAAG,CAAC,2BAA2B,YAAY,MAAM,EAAE;YAE3D,gDAAgD;YAChD,MAAM,WAAW;gBACf,GAAG,IAAI;gBACP,aAAa;gBACb,UAAU;gBACV,UAAU;YACZ;YAEA,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAE3B,SAAU;YACR,WAAW,OAAO;QACpB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO,AAAC,MAAgB,OAAO;QACjC,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAIO,eAAe,IACpB,GAAgB,EAChB,EAAE,MAAM,EAA8C;IAEtD,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,4BAA4B;QAC5B,MAAM,iBAAiB,MAAM;QAC7B,MAAM,YAAY,OAAO,eAAe,SAAS;QACjD,QAAQ,GAAG,CAAC,wBAAwB;QAEpC,IAAI,MAAM,cAAc,aAAa,GAAG;YACtC,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,QAAQ,GAAG,CAAC;QACZ,MAAM,aAAa,MAAM,kHAAA,CAAA,UAAI,CAAC,aAAa;QAC3C,QAAQ,GAAG,CAAC;QAEZ,IAAI;YACF,QAAQ,GAAG,CAAC;YACZ,MAAM,WAAW,gBAAgB;YACjC,QAAQ,GAAG,CAAC;YAEZ,kBAAkB;YAClB,QAAQ,GAAG,CAAC;YACZ,MAAM,WAAW,MAAM,IAAI,QAAQ;YACnC,QAAQ,GAAG,CAAC;YAEZ,wCAAwC;YACxC,MAAM,aAAa,SAAS,GAAG,CAAC;YAChC,MAAM,uBAAuB,aAAa,OAAO,cAAc;YAC/D,QAAQ,GAAG,CAAC,mCAAmC;YAE/C,0BAA0B;YAC1B,MAAM,eAAe,EAAE;YACvB,MAAM,eAAe,EAAE;YAEvB,+CAA+C;YAC/C,aAAa,IAAI,CAAC;YAElB,IAAI,wBAAwB,CAAC,MAAM,yBAAyB,uBAAuB,GAAG;gBACpF,aAAa,IAAI,CAAC;gBAClB,aAAa,IAAI,CAAC;gBAClB,QAAQ,GAAG,CAAC,8BAA8B;YAC5C;YAEA,6DAA6D;YAC7D,MAAM,gBAAgB;gBACpB,sBAAsB;gBACtB,mBAAmB;gBACnB,eAAe;gBACf,QAAQ;gBACR,cAAc;gBACd,cAAc;gBACd,kBAAkB;gBAClB,mBAAmB;gBACnB,oBAAoB;gBACpB,UAAU;gBACV,qBAAqB;gBACrB,YAAY;gBACZ,cAAc;gBACd,eAAe;gBACf,eAAe;YACjB;YAEA,KAAK,MAAM,CAAC,WAAW,QAAQ,IAAI,OAAO,OAAO,CAAC,eAAgB;gBAChE,MAAM,QAAQ,SAAS,GAAG,CAAC;gBAE3B,IAAI,UAAU,QAAQ,UAAU,IAAI;oBAClC,aAAa,IAAI,CAAC,GAAG,QAAQ,IAAI,CAAC;oBAElC,iCAAiC;oBACjC,IAAI;wBAAC;wBAAuB;wBAA4B;wBAAkB;qBAAsB,CAAC,QAAQ,CAAC,UAAU;wBAClH,MAAM,WAAW,OAAO;wBACxB,aAAa,IAAI,CAAC,MAAM,YAAY,OAAO;oBAC7C,OAAO;wBACL,aAAa,IAAI,CAAC,MAAM,IAAI;oBAC9B;oBAEA,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,UAAU,IAAI,EAAE,QAAQ,GAAG,EAAE,OAAO;gBACvE;YACF;YAEA,2DAA2D;YAC3D,MAAM,kBAAkB,SAAS,GAAG,CAAC;YACrC,aAAa,IAAI,CAAC;YAElB,IAAI,CAAC,mBAAmB,gBAAgB,IAAI,OAAO,IAAI;gBACrD,aAAa,IAAI,CAAC;gBAClB,QAAQ,GAAG,CAAC;YACd,OAAO;gBACL,uBAAuB;gBACvB,MAAM,YAAY,gBAAgB,IAAI;gBACtC,IAAI,sBAAsB,IAAI,CAAC,YAAY;oBACzC,aAAa,IAAI,CAAC;oBAClB,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,WAAW;gBAClD,OAAO;oBACL,aAAa,IAAI,CAAC;oBAClB,QAAQ,GAAG,CAAC;gBACd;YACF;YAEA,iCAAiC;YACjC,IAAI,aAAa,MAAM,GAAG,GAAG;gBAC3B,QAAQ,GAAG,CAAC;gBACZ,aAAa,IAAI,CAAC;gBAElB,MAAM,cAAc,CAAC;;cAEf,EAAE,aAAa,IAAI,CAAC,MAAM;;QAEhC,CAAC;gBAED,QAAQ,GAAG,CAAC,oBAAoB;gBAChC,QAAQ,GAAG,CAAC,qBAAqB;gBAEjC,MAAM,CAAC,aAAa,GAAG,MAAM,WAAW,OAAO,CAAkB,aAAa;gBAC9E,QAAQ,GAAG,CAAC,0BAA0B;oBACpC,cAAc,aAAa,YAAY;oBACvC,aAAa,aAAa,WAAW;gBACvC;gBAEA,IAAI,aAAa,YAAY,KAAK,GAAG;oBACnC,MAAM,IAAI,MAAM;gBAClB;YACF;YAEA,6CAA6C;YAC7C,QAAQ,GAAG,CAAC;YACZ,MAAM,uBAAuB,SAAS,GAAG,CAAC;YAE1C,IAAI,sBAAsB;gBACxB,IAAI;oBACF,MAAM,oBAAuC,KAAK,KAAK,CAAC;oBACxD,QAAQ,GAAG,CAAC,iCAAiC;wBAC3C,KAAK,kBAAkB,GAAG,EAAE,UAAU;wBACtC,MAAM,kBAAkB,IAAI,EAAE,UAAU;wBACxC,QAAQ,kBAAkB,MAAM,EAAE,UAAU;wBAC5C,WAAW,kBAAkB,SAAS,EAAE,UAAU;oBACpD;oBAEA,qDAAqD;oBACrD,IAAI,kBAAkB,MAAM,IAAI,kBAAkB,MAAM,CAAC,MAAM,GAAG,GAAG;wBACnE,QAAQ,GAAG,CAAC;wBACZ,KAAK,MAAM,WAAW,kBAAkB,MAAM,CAAE;4BAC9C,QAAQ,GAAG,CAAC,yBAAyB;4BAErC,8DAA8D;4BAC9D,MAAM,CAAC,OAAO,GAAG,MAAM,WAAW,OAAO,CACvC,CAAC;wDACuC,CAAC,EACzC;gCAAC;gCAAW,QAAQ,gBAAgB;6BAAC;4BAEvC,QAAQ,GAAG,CAAC,sBAAsB;gCAChC,WAAW,QAAQ,gBAAgB;gCACnC,cAAc,OAAO,YAAY;4BACnC;wBACF;oBACF;oBAEA,2CAA2C;oBAC3C,IAAI,kBAAkB,IAAI,IAAI,kBAAkB,IAAI,CAAC,MAAM,GAAG,GAAG;wBAC/D,QAAQ,GAAG,CAAC;wBACZ,KAAK,MAAM,WAAW,kBAAkB,IAAI,CAAE;4BAC5C,QAAQ,GAAG,CAAC,uBAAuB;4BAEnC,6DAA6D;4BAC7D,MAAM,CAAC,aAAa,GAAG,MAAM,WAAW,OAAO,CAC7C,CAAC;;;;wDAIuC,CAAC,EACzC;gCACE,QAAQ,YAAY,IAAI;gCACxB,QAAQ,SAAS,IAAI;gCACrB;gCACA,QAAQ,gBAAgB;6BACzB;4BAGH,QAAQ,GAAG,CAAC,sBAAsB;gCAChC,WAAW,QAAQ,gBAAgB;gCACnC,cAAc,aAAa,YAAY;4BACzC;wBACF;oBACF;oBAEA,oDAAoD;oBACpD,IAAI,kBAAkB,GAAG,IAAI,kBAAkB,GAAG,CAAC,MAAM,GAAG,GAAG;wBAC7D,QAAQ,GAAG,CAAC;wBACZ,KAAK,MAAM,WAAW,kBAAkB,GAAG,CAAE;4BAC3C,QAAQ,GAAG,CAAC,qBAAqB;4BAEjC,sDAAsD;4BACtD,MAAM,CAAC,aAAa,GAAG,MAAM,WAAW,OAAO,CAC7C,CAAC;wDACuC,CAAC,EACzC;gCAAC;gCAAW,QAAQ,gBAAgB;6BAAC;4BAGvC,IAAI,aAAa,MAAM,GAAG,GAAG;gCAC3B,QAAQ,GAAG,CAAC;gCACZ,sCAAsC;gCACtC,MAAM,WAAW,OAAO,CACtB,CAAC;;;;0DAIuC,CAAC,EACzC;oCACE,QAAQ,YAAY,IAAI;oCACxB,QAAQ,SAAS,IAAI;oCACrB;oCACA,QAAQ,gBAAgB;iCACzB;gCAEH,QAAQ,GAAG,CAAC;gCACZ;4BACF;4BAEA,qBAAqB;4BACrB,MAAM,CAAC,OAAO,GAAG,MAAM,WAAW,OAAO,CACvC,CAAC;;kDAEiC,CAAC,EACnC;gCACE;gCACA,QAAQ,gBAAgB;gCACxB,QAAQ,YAAY,IAAI;gCACxB,QAAQ,SAAS,IAAI;6BACtB;4BAGH,QAAQ,GAAG,CAAC,oBAAoB;gCAC9B,UAAU,OAAO,QAAQ;gCACzB,cAAc,OAAO,YAAY;4BACnC;wBACF;oBACF;gBAEF,EAAE,OAAO,mBAAmB;oBAC1B,QAAQ,KAAK,CAAC,uCAAuC;oBACrD,MAAM,IAAI,MAAM;gBAClB;YACF;YAEA,mDAAmD;YACnD,MAAM,UAAU,SAAS,GAAG,CAAC;YAC7B,IAAI,WAAW,QAAQ,IAAI,IAAI;gBAC7B,QAAQ,GAAG,CAAC,sBAAsB,QAAQ,IAAI;gBAE9C,MAAM,CAAC,cAAc,GAAG,MAAM,WAAW,OAAO,CAC9C,CAAC;;kCAEuB,CAAC,EACzB;oBAAC;oBAAW,QAAQ,IAAI;oBAAI,wBAAwB;iBAAK;gBAG3D,QAAQ,GAAG,CAAC,iCAAiC;oBAC3C,UAAU,cAAc,QAAQ;oBAChC,cAAc,cAAc,YAAY;gBAC1C;gBAEA,4DAA4D;gBAC5D,MAAM,WAAW,OAAO,CACtB,CAAC;;+BAEoB,CAAC,EACtB;oBAAC,QAAQ,IAAI;oBAAI;iBAAU;gBAG7B,QAAQ,GAAG,CAAC;YACd;YAEA,oDAAoD;YACpD,MAAM,cAAc,SAAS,MAAM,CAAC;YACpC,IAAI,YAAY,MAAM,GAAG,KAAK,WAAW,CAAC,EAAE,CAAC,IAAI,GAAG,GAAG;gBACrD,QAAQ,GAAG,CAAC,8BAA8B,YAAY,MAAM;gBAE5D,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,WAAW,WAAW,UAAU,QAAQ;gBAE9F,IAAI;oBACF,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,YAAY;wBAAE,WAAW;oBAAK;oBAC1C,QAAQ,GAAG,CAAC;gBACd,EAAE,OAAO,UAAU;oBACjB,QAAQ,KAAK,CAAC,sCAAsC;oBACpD,MAAM,IAAI,MAAM;gBAClB;gBAEA,KAAK,MAAM,QAAQ,YAAa;oBAC9B,IAAI,KAAK,IAAI,GAAG,GAAG;wBACjB,IAAI;4BACF,yCAAyC;4BACzC,MAAM,gBAAgB,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,KAAK,IAAI;4BAC5C,MAAM,eAAe,iGAAA,CAAA,UAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,EAAE,eAC3C,OAAO,CAAC,oBAAoB,KAAK,oBAAoB;6BACrD,SAAS,CAAC,GAAG,MAAM,eAAe;4BACrC,MAAM,YAAY,KAAK,GAAG;4BAC1B,MAAM,iBAAiB,GAAG,aAAa,CAAC,EAAE,YAAY,eAAe;4BACrE,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,YAAY;4BAEvC,sCAAsC;4BACtC,IAAI,KAAK,IAAI,GAAG,KAAK,OAAO,MAAM;gCAChC,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,wBAAwB,CAAC;4BAC7D;4BAEA,YAAY;4BACZ,MAAM,QAAQ,MAAM,KAAK,WAAW;4BACpC,MAAM,SAAS,OAAO,IAAI,CAAC;4BAC3B,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EAAE,UAAU;4BAC1B,QAAQ,GAAG,CAAC,iBAAiB;4BAE7B,8CAA8C;4BAC9C,MAAM,eAAe,CAAC,iBAAiB,EAAE,UAAU,CAAC,EAAE,gBAAgB;4BAEtE,MAAM,CAAC,iBAAiB,GAAG,MAAM,WAAW,OAAO,CACjD,CAAC;;2CAE0B,CAAC,EAC5B;gCAAC;gCAAW,KAAK,IAAI;gCAAE;gCAAc,wBAAwB;6BAAK;4BAGpE,QAAQ,GAAG,CAAC,2BAA2B;gCACrC,UAAU,iBAAiB,QAAQ;gCACnC,cAAc,iBAAiB,YAAY;4BAC7C;wBACF,EAAE,OAAO,WAAW;4BAClB,QAAQ,KAAK,CAAC,4BAA4B,KAAK,IAAI,EAAE;4BACrD,MAAM,IAAI,MAAM,CAAC,wBAAwB,EAAE,KAAK,IAAI,CAAC,GAAG,EAAE,AAAC,UAAoB,OAAO,EAAE;wBAC1F;oBACF;gBACF;YACF;YAEA,uDAAuD;YACvD,MAAM,0BAA0B,SAAS,GAAG,CAAC;YAC7C,IAAI,yBAAyB;gBAC3B,QAAQ,GAAG,CAAC;gBAEZ,IAAI;oBACF,MAAM,aAAuB,KAAK,KAAK,CAAC;oBACxC,QAAQ,GAAG,CAAC,iCAAiC;oBAE7C,KAAK,MAAM,gBAAgB,WAAY;wBACrC,sDAAsD;wBACtD,MAAM,CAAC,eAAe,GAAG,MAAM,WAAW,OAAO,CAC/C,CAAC;;iEAEkD,CAAC,EACpD;4BAAC;4BAAc;yBAAU;wBAG3B,IAAI,eAAe,MAAM,GAAG,GAAG;4BAC7B,MAAM,WAAW,cAAc,CAAC,EAAE,CAAC,4BAA4B;4BAE/D,uBAAuB;4BACvB,MAAM,CAAC,aAAa,GAAG,MAAM,WAAW,OAAO,CAC7C,CAAC;mEACkD,CAAC,EACpD;gCAAC;gCAAc;6BAAU;4BAG3B,QAAQ,GAAG,CAAC,uCAAuC;gCACjD;gCACA,cAAc,aAAa,YAAY;4BACzC;4BAEA,iDAAiD;4BACjD,IAAI,aAAa,YAAY,GAAG,KAAK,UAAU;gCAC7C,IAAI;oCACF,MAAM,eAAe,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU;oCACxD,MAAM,CAAA,GAAA,qHAAA,CAAA,SAAM,AAAD,EAAE;oCACb,QAAQ,GAAG,CAAC;gCACd,EAAE,OAAO,iBAAiB;oCACxB,QAAQ,IAAI,CAAC,sDAAsD;gCACnE,+CAA+C;gCACjD;4BACF;wBACF,OAAO;4BACL,QAAQ,IAAI,CAAC,yDAAyD;wBACxE;oBACF;gBACF,EAAE,OAAO,YAAY;oBACnB,QAAQ,KAAK,CAAC,2CAA2C;oBACzD,MAAM,IAAI,MAAM;gBAClB;YACF;YAEA,QAAQ,GAAG,CAAC;YACZ,MAAM,WAAW,MAAM;YACvB,QAAQ,GAAG,CAAC;YAEZ,kDAAkD;YAClD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;gBACT,WAAW;gBACX,WAAW,IAAI,OAAO,WAAW;YACnC;QAEF,EAAE,OAAO,OAAO;YACd,QAAQ,GAAG,CAAC;YACZ,MAAM,WAAW,QAAQ;YACzB,QAAQ,GAAG,CAAC;YACZ,MAAM;QACR,SAAU;YACR,WAAW,OAAO;YAClB,QAAQ,GAAG,CAAC;QACd;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAE9C,yCAAyC;QACzC,IAAI,eAAe;QACnB,IAAI,aAAa;QAEjB,IAAI,iBAAiB,OAAO;YAC1B,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,mBAAmB;gBAC5C,eAAe;gBACf,aAAa;YACf,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,YAAY;gBAC5C,eAAe,MAAM,OAAO;gBAC5B,aAAa;YACf,OAAO,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,cAAc;gBAC9C,eAAe,MAAM,OAAO;gBAC5B,aAAa;YACf;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,AAAC,MAAgB,OAAO;YACjC,WAAW,IAAI,OAAO,WAAW;QACnC,GAAG;YAAE,QAAQ;QAAW;IAC1B;AACF","debugId":null}}]
}