{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20org/crm/app/lib/db.js"],"sourcesContent":["// lib/db.js\r\nimport mysql from 'mysql2/promise';\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || 'root',\r\n  database: process.env.DB_NAME || 'crm',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;;AAEA,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20org/crm/app/api/fsn/add/route.ts"],"sourcesContent":["// app/api/fsn/add/route.ts\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport db from '../../../lib/db';\r\nimport { ResultSetHeader } from 'mysql2';\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n    const {\r\n      enquiry_number,\r\n      fsn_enquiry_date,\r\n      fsn_num,\r\n      fsn_date,\r\n      fsn_organization_name,\r\n      fsn_contact_name,\r\n      fsn_target_date,\r\n      fsn_required_delivery_schedules,\r\n      fsn_test_procedures,\r\n      products\r\n    } = body;\r\n\r\n    // Validate required fields\r\n    if (!enquiry_number) {\r\n      return NextResponse.json(\r\n        { error: 'Enquiry number is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!fsn_num) {\r\n      return NextResponse.json(\r\n        { error: 'FSN number is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    if (!products || products.length === 0) {\r\n      return NextResponse.json(\r\n        { error: 'At least one product is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const connection = await db.getConnection();\r\n\r\n    try {\r\n      await connection.beginTransaction();\r\n\r\n      // 1. Insert into FSN main table using correct field names from schema\r\n      const [fsnResult] = await connection.execute<ResultSetHeader>(\r\n        `INSERT INTO crm_fsn (\r\n          enquiry_id,\r\n          enquiry_date,\r\n          fsn_num,\r\n          fsn_date,\r\n          fsn_organization_name,\r\n          fsn_contact_name,\r\n          fsn_target_date,\r\n          fsn_required_delivery_schedules,\r\n          fsn_test_procedures,\r\n          fsn_created_on,\r\n          fsn_modified_on,\r\n          fsn_created_by\r\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NULL, ?)`,\r\n        [\r\n          enquiry_number,\r\n          fsn_enquiry_date || null,\r\n          fsn_num || null,\r\n          fsn_date || null,\r\n          fsn_organization_name || null,\r\n          fsn_contact_name || null,\r\n          fsn_target_date || null,\r\n          fsn_required_delivery_schedules || null,\r\n          fsn_test_procedures || null,\r\n          1 // TODO: Replace with actual logged-in user ID\r\n        ]\r\n      );\r\n\r\n      const fsnId = fsnResult.insertId;\r\n\r\n      // 2. Insert products using correct field names from schema\r\n      for (const product of products) {\r\n        const [productResult] = await connection.execute<ResultSetHeader>(\r\n          `INSERT INTO crm_fsn_product (\r\n            fsn_id,\r\n            product_id,\r\n            fsn_product_qty,\r\n            fsn_product_feasibility,\r\n            fsn_product_bom_cost,\r\n            fsn_product_comments\r\n          ) VALUES (?, ?, ?, ?, ?, ?)`,\r\n          [\r\n            fsnId,\r\n            product.crmtf_product_id || null,\r\n            product.fsn_product_qty || 0,\r\n            product.feasibility || null,\r\n            product.bom_cost || null,\r\n            product.fsn_comments || null,\r\n          ]\r\n        );\r\n\r\n        const fsnProductId = productResult.insertId;\r\n\r\n        // Handle attachments if any\r\n        if (product.attachments && Array.isArray(product.attachments) && product.attachments.length > 0) {\r\n          for (const attachment of product.attachments) {\r\n            await connection.execute(\r\n              `INSERT INTO crm_fsn_attachment (\r\n                fsn_id,\r\n                fsn_product_id,\r\n                fsn_attachment_file_name,\r\n                fsn_attachment_file_size,\r\n                fsn_attachment_file_type,\r\n                fsn_attachment_file_url\r\n              ) VALUES (?, ?, ?, ?, ?, ?)`,\r\n              [\r\n                fsnId,\r\n                fsnProductId,\r\n                attachment.name || null,\r\n                attachment.size || null,\r\n                attachment.type || null,\r\n                attachment.url || null,\r\n              ]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      await connection.commit();\r\n      \r\n      return NextResponse.json({ \r\n        message: 'FSN created successfully', \r\n        fsnId: fsnId \r\n      });\r\n      \r\n    } catch (error) {\r\n      await connection.rollback();\r\n      throw error;\r\n    } finally {\r\n      connection.release();\r\n    }\r\n  } catch (error) {\r\n    console.error('FSN creation failed:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to create FSN', details: error instanceof Error ? error.message : 'Unknown error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"AAAA,2BAA2B;;;;AAC3B;AACA;;;AAGO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EACJ,cAAc,EACd,gBAAgB,EAChB,OAAO,EACP,QAAQ,EACR,qBAAqB,EACrB,gBAAgB,EAChB,eAAe,EACf,+BAA+B,EAC/B,mBAAmB,EACnB,QAAQ,EACT,GAAG;QAEJ,2BAA2B;QAC3B,IAAI,CAAC,gBAAgB;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,YAAY,SAAS,MAAM,KAAK,GAAG;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAmC,GAC5C;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,aAAa,MAAM,kHAAA,CAAA,UAAE,CAAC,aAAa;QAEzC,IAAI;YACF,MAAM,WAAW,gBAAgB;YAEjC,sEAAsE;YACtE,MAAM,CAAC,UAAU,GAAG,MAAM,WAAW,OAAO,CAC1C,CAAC;;;;;;;;;;;;;4DAamD,CAAC,EACrD;gBACE;gBACA,oBAAoB;gBACpB,WAAW;gBACX,YAAY;gBACZ,yBAAyB;gBACzB,oBAAoB;gBACpB,mBAAmB;gBACnB,mCAAmC;gBACnC,uBAAuB;gBACvB,EAAE,8CAA8C;aACjD;YAGH,MAAM,QAAQ,UAAU,QAAQ;YAEhC,2DAA2D;YAC3D,KAAK,MAAM,WAAW,SAAU;gBAC9B,MAAM,CAAC,cAAc,GAAG,MAAM,WAAW,OAAO,CAC9C,CAAC;;;;;;;qCAO0B,CAAC,EAC5B;oBACE;oBACA,QAAQ,gBAAgB,IAAI;oBAC5B,QAAQ,eAAe,IAAI;oBAC3B,QAAQ,WAAW,IAAI;oBACvB,QAAQ,QAAQ,IAAI;oBACpB,QAAQ,YAAY,IAAI;iBACzB;gBAGH,MAAM,eAAe,cAAc,QAAQ;gBAE3C,4BAA4B;gBAC5B,IAAI,QAAQ,WAAW,IAAI,MAAM,OAAO,CAAC,QAAQ,WAAW,KAAK,QAAQ,WAAW,CAAC,MAAM,GAAG,GAAG;oBAC/F,KAAK,MAAM,cAAc,QAAQ,WAAW,CAAE;wBAC5C,MAAM,WAAW,OAAO,CACtB,CAAC;;;;;;;yCAO0B,CAAC,EAC5B;4BACE;4BACA;4BACA,WAAW,IAAI,IAAI;4BACnB,WAAW,IAAI,IAAI;4BACnB,WAAW,IAAI,IAAI;4BACnB,WAAW,GAAG,IAAI;yBACnB;oBAEL;gBACF;YACF;YAEA,MAAM,WAAW,MAAM;YAEvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,OAAO;YACT;QAEF,EAAE,OAAO,OAAO;YACd,MAAM,WAAW,QAAQ;YACzB,MAAM;QACR,SAAU;YACR,WAAW,OAAO;QACpB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAwB,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAgB,GACnG;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}