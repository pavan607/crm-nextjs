{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20org/crm/app/lib/db.js"],"sourcesContent":["// lib/db.js\r\nimport mysql from 'mysql2/promise';\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || 'root',\r\n  database: process.env.DB_NAME || 'crm',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;;AAEA,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20org/crm/app/api/fsn/list/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport db from '../../../lib/db'; // MySQL connection\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    \r\n    // Get query parameters\r\n    const page = parseInt(searchParams.get('page') || '1');\r\n    const limit = parseInt(searchParams.get('limit') || '10');\r\n    const search = searchParams.get('search') || '';\r\n    const status = searchParams.get('status') || '';\r\n    const dateFrom = searchParams.get('dateFrom') || '';\r\n    const dateTo = searchParams.get('dateTo') || '';\r\n    const organization = searchParams.get('organization') || '';\r\n    \r\n    const offset = (page - 1) * limit;\r\n    \r\n    // Build where conditions (MySQL syntax)\r\n    let whereConditions = [];\r\n    let queryParams: any[] = [];\r\n    \r\n    if (search) {\r\n      whereConditions.push(`(\r\n        cf.fsn_num LIKE ? OR \r\n        ce.crm_enquiry_number LIKE ? OR \r\n        cf.fsn_organization_name LIKE ? OR \r\n        cf.fsn_contact_name LIKE ?\r\n      )`);\r\n      queryParams.push(`%${search}%`, `%${search}%`, `%${search}%`, `%${search}%`);\r\n    }\r\n    \r\n    if (status) {\r\n      whereConditions.push(`cf.fsn_status = ?`);\r\n      queryParams.push(status);\r\n    }\r\n    \r\n    if (dateFrom) {\r\n      whereConditions.push(`cf.fsn_date >= ?`);\r\n      queryParams.push(dateFrom);\r\n    }\r\n    \r\n    if (dateTo) {\r\n      whereConditions.push(`cf.fsn_date <= ?`);\r\n      queryParams.push(dateTo);\r\n    }\r\n    \r\n    if (organization) {\r\n      whereConditions.push(`cf.fsn_organization_name LIKE ?`);\r\n      queryParams.push(`%${organization}%`);\r\n    }\r\n    \r\n    const whereClause = whereConditions.length > 0 \r\n      ? `WHERE ${whereConditions.join(' AND ')}`\r\n      : '';\r\n    \r\n    // Get total count\r\n    const countQuery = `\r\n      SELECT COUNT(*) as total\r\n      FROM crm_fsn cf\r\n      LEFT JOIN crmtf_enquiry ce ON cf.fsn_enquiry_id = ce.crm_enquiry_id\r\n      ${whereClause}\r\n    `;\r\n    \r\n    const [countResult] = await db.query(countQuery, queryParams) as any;\r\n    const total = countResult[0].total;\r\n    \r\n    // Get records with pagination\r\n    const recordsQuery = `\r\n      SELECT \r\n        cf.fsn_id,\r\n        cf.fsn_enquiry_id,\r\n        ce.crm_enquiry_number,\r\n        cf.fsn_enquiry_date,\r\n        cf.fsn_num,\r\n        cf.fsn_date,\r\n        cf.fsn_organization_name,\r\n        cf.fsn_contact_name,\r\n        cf.fsn_target_date,\r\n        cf.fsn_required_delivery_schedules,\r\n        cf.fsn_test_procedures,\r\n        cf.created_on,\r\n        cf.modified_on,\r\n        cf.fsn_status as status,\r\n        (\r\n          SELECT COUNT(*) \r\n          FROM crm_fsn_product cfp \r\n          WHERE cfp.fsn_id = cf.fsn_id\r\n        ) as products_count\r\n      FROM crm_fsn cf\r\n      LEFT JOIN crmtf_enquiry ce ON cf.fsn_enquiry_id = ce.crm_enquiry_id\r\n      ${whereClause}\r\n      ORDER BY cf.created_on DESC\r\n      LIMIT ? OFFSET ?\r\n    `;\r\n    \r\n    const finalParams = [...queryParams, limit, offset];\r\n    const [rows] = await db.query(recordsQuery, finalParams) as any;\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data: rows,\r\n      pagination: {\r\n        total,\r\n        page,\r\n        limit,\r\n        totalPages: Math.ceil(total / limit)\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error fetching FSN records:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Failed to fetch FSN records' \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(request: NextRequest) {\r\n  try {\r\n    const { ids } = await request.json();\r\n    \r\n    if (!ids || !Array.isArray(ids) || ids.length === 0) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'No IDs provided' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    // Create placeholders for IN clause\r\n    const placeholders = ids.map(() => '?').join(',');\r\n    \r\n    // Delete related attachments and products first (CASCADE should handle this but being explicit)\r\n    await db.query(\r\n      `DELETE FROM crm_fsn_attachments WHERE fsn_id IN (${placeholders})`,\r\n      ids\r\n    );\r\n    \r\n    await db.query(\r\n      `DELETE FROM crm_fsn_product WHERE fsn_id IN (${placeholders})`,\r\n      ids\r\n    );\r\n    \r\n    // Delete FSN records\r\n    const [result] = await db.query(\r\n      `DELETE FROM crm_fsn WHERE fsn_id IN (${placeholders})`,\r\n      ids\r\n    ) as any;\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      message: `${result.affectedRows} records deleted successfully`\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error deleting FSN records:', error);\r\n    return NextResponse.json(\r\n      { \r\n        success: false, \r\n        error: 'Failed to delete FSN records' \r\n      },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}