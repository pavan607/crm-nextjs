{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20org/crm/app/lib/db.js"],"sourcesContent":["// lib/db.js\r\nimport mysql from 'mysql2/promise';\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || 'root',\r\n  database: process.env.DB_NAME || 'crm',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;;AAEA,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20org/crm/app/api/enquiry/list/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport pool from '../../../lib/db'; // Adjust path as needed\r\nimport { RowDataPacket } from 'mysql2';\r\n\r\ntype LeadRow = {\r\n  enquiry_number: string;           // was crm_enquiry_number\r\n  enquiry_id: number;               // was crm_enquiry_id\r\n  enquiry_name: string;             // was crm_opportunity_name\r\n  enquiry_contact_name?: string;    // was crm_contact_name\r\n  enquiry_type?: string;            // was crm_type\r\n  enquiry_source?: string;          // was crm_lead_source\r\n  enquiry_assigned_to?: number;     // was crm_assigned_to\r\n  assigned_to_name?: string;\r\n  enquiry_campaign_source?: string; // was crm_campaign_source\r\n  enquiry_weighted_revenue?: number; // was crm_weighted_revenue\r\n  enquiry_organization_name?: string; // was crm_organization_name\r\n  enquiry_amount?: number;          // was crm_amount\r\n  enquiry_expected_close_date?: string; // was crm_expected_close_date\r\n  enquiry_next_step?: string;       // was crm_next_step\r\n  enquiry_sales_stage?: string;     // was crm_sales_stage\r\n  enquiry_probability?: number;     // was crm_probability\r\n  enquiry_description?: string;     // was crm_description\r\n  products?: string;\r\n  attachments?: string;\r\n  comments?: string;\r\n};\r\n\r\nconst mapLeadRow = (row: LeadRow) => ({\r\n  enquiryNumber: row.enquiry_number,        // was crm_enquiry_number\r\n  enquiryId: row.enquiry_id,               // was crm_enquiry_id  \r\n  opportunityName: row.enquiry_name,        // was crm_opportunity_name\r\n  contactName: row.enquiry_contact_name,    // was crm_contact_name\r\n  type: row.enquiry_type,                  // was crm_type\r\n  leadSource: row.enquiry_source,          // was crm_lead_source\r\n  assignedToId: row.enquiry_assigned_to,   // was crm_assigned_to\r\n  assignedToName: row.assigned_to_name,\r\n  campaignSource: row.enquiry_campaign_source, // was crm_campaign_source\r\n  weightedRevenue: row.enquiry_weighted_revenue, // was crm_weighted_revenue\r\n  organizationName: row.enquiry_organization_name, // was crm_organization_name\r\n  amount: row.enquiry_amount,              // was crm_amount\r\n  expectedCloseDate: row.enquiry_expected_close_date, // was crm_expected_close_date\r\n  nextStep: row.enquiry_next_step,         // was crm_next_step\r\n  salesStage: row.enquiry_sales_stage,     // was crm_sales_stage\r\n  probability: row.enquiry_probability,    // was crm_probability\r\n  description: row.enquiry_description,    // was crm_description\r\n  products: row.products,\r\n  attachments: row.attachments,\r\n  comments: row.comments,\r\n});\r\n\r\nexport async function GET() {\r\n  try {\r\n    const [rows] = await pool.query<RowDataPacket[]>(`\r\n      SELECT\r\n        e.enquiry_number,\r\n        e.enquiry_id,\r\n        e.enquiry_name,\r\n        e.enquiry_contact_name,\r\n        e.enquiry_type,\r\n        e.enquiry_source,\r\n        e.enquiry_assigned_to,\r\n        CONCAT(emp.employee_first_name, ' ', emp.employee_last_name) AS assigned_to_name,\r\n        e.enquiry_campaign_source,\r\n        e.enquiry_weighted_revenue,\r\n        e.enquiry_organization_name,\r\n        e.enquiry_amount,\r\n        DATE_FORMAT(e.enquiry_expected_close_date, '%Y-%m-%d') AS enquiry_expected_close_date,\r\n        e.enquiry_next_step,\r\n        e.enquiry_sales_stage,\r\n        e.enquiry_probability,\r\n        e.enquiry_description,\r\n        GROUP_CONCAT(DISTINCT p.product_name SEPARATOR ', ') AS products,\r\n        GROUP_CONCAT(DISTINCT a.enquiry_attachment_file_name SEPARATOR ', ') AS attachments,\r\n        GROUP_CONCAT(DISTINCT c.enquiry_comment_text SEPARATOR '; ') AS comments\r\n      FROM crm_enquiry e\r\n      LEFT JOIN crm_employee emp ON e.enquiry_assigned_to = emp.employee_id\r\n      LEFT JOIN crm_enquiry_product ep ON e.enquiry_id = ep.enquiry_id\r\n      LEFT JOIN crm_product p ON ep.product_id = p.product_id\r\n      LEFT JOIN crm_enquiry_attachment a ON e.enquiry_id = a.enquiry_id\r\n      LEFT JOIN crm_enquiry_comment c ON e.enquiry_id = c.enquiry_id\r\n      GROUP BY e.enquiry_id\r\n      ORDER BY e.enquiry_id DESC\r\n    `);\r\n\r\n    const leads = (rows as LeadRow[]).map(mapLeadRow);\r\n    return NextResponse.json(leads);\r\n  } catch (error) {\r\n    console.error('Error fetching leads:', error);\r\n    return NextResponse.json({ error: 'Error fetching leads' }, { status: 500 });\r\n  }\r\n}\r\nexport async function DELETE(\r\n  request: Request,\r\n  { params }: { params: { id: string } }\r\n) {\r\n  const leadId = parseInt(params.id);\r\n  \r\n  if (isNaN(leadId)) {\r\n    return NextResponse.json({ error: 'Invalid lead ID' }, { status: 400 });\r\n  }\r\n\r\n  const connection = await pool.getConnection();\r\n  \r\n  try {\r\n    await connection.beginTransaction();\r\n\r\n    // Check if the enquiry exists\r\n    const [existingLead] = await connection.query<RowDataPacket[]>(\r\n      'SELECT crm_enquiry_id FROM crm_enquiry WHERE enquiry_id = ?',\r\n      [leadId]\r\n    );\r\n\r\n    if (existingLead.length === 0) {\r\n      await connection.rollback();\r\n      return NextResponse.json({ error: 'Enquiry not found' }, { status: 404 });\r\n    }\r\n\r\n    // Delete related records first (to maintain referential integrity)\r\n    \r\n    // Delete enquiry comments\r\n    await connection.query(\r\n      'DELETE FROM crm_enquiry_comment WHERE enquiry_id = ?',\r\n      [leadId]\r\n    );\r\n\r\n    // Delete enquiry attachments\r\n    await connection.query(\r\n      'DELETE FROM crm_enquiry_attachment WHERE crm_enquiry_id = ?',\r\n      [leadId]\r\n    );\r\n\r\n    // Delete enquiry products\r\n    await connection.query(\r\n      'DELETE FROM crm_enquiry_product WHERE enquiry_id = ?',\r\n      [leadId]\r\n    );\r\n\r\n    // Finally, delete the main enquiry record\r\n    const [result] = await connection.query(\r\n      'DELETE FROM crm_enquiry WHERE enquiry_id = ?',\r\n      [leadId]\r\n    );\r\n\r\n    await connection.commit();\r\n\r\n    return NextResponse.json({ \r\n      message: 'Enquiry deleted successfully',\r\n      deletedId: leadId \r\n    });\r\n\r\n  } catch (error) {\r\n    await connection.rollback();\r\n    console.error('Error deleting enquiry:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to delete enquiry' },\r\n      { status: 500 }\r\n    );\r\n  } finally {\r\n    connection.release();\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA,sMAAoC,wBAAwB;;;AA0B5D,MAAM,aAAa,CAAC,MAAiB,CAAC;QACpC,eAAe,IAAI,cAAc;QACjC,WAAW,IAAI,UAAU;QACzB,iBAAiB,IAAI,YAAY;QACjC,aAAa,IAAI,oBAAoB;QACrC,MAAM,IAAI,YAAY;QACtB,YAAY,IAAI,cAAc;QAC9B,cAAc,IAAI,mBAAmB;QACrC,gBAAgB,IAAI,gBAAgB;QACpC,gBAAgB,IAAI,uBAAuB;QAC3C,iBAAiB,IAAI,wBAAwB;QAC7C,kBAAkB,IAAI,yBAAyB;QAC/C,QAAQ,IAAI,cAAc;QAC1B,mBAAmB,IAAI,2BAA2B;QAClD,UAAU,IAAI,iBAAiB;QAC/B,YAAY,IAAI,mBAAmB;QACnC,aAAa,IAAI,mBAAmB;QACpC,aAAa,IAAI,mBAAmB;QACpC,UAAU,IAAI,QAAQ;QACtB,aAAa,IAAI,WAAW;QAC5B,UAAU,IAAI,QAAQ;IACxB,CAAC;AAEM,eAAe;IACpB,IAAI;QACF,MAAM,CAAC,KAAK,GAAG,MAAM,kHAAA,CAAA,UAAI,CAAC,KAAK,CAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8BlD,CAAC;QAED,MAAM,QAAQ,AAAC,KAAmB,GAAG,CAAC;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAC5E;AACF;AACO,eAAe,OACpB,OAAgB,EAChB,EAAE,MAAM,EAA8B;IAEtC,MAAM,SAAS,SAAS,OAAO,EAAE;IAEjC,IAAI,MAAM,SAAS;QACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAkB,GAAG;YAAE,QAAQ;QAAI;IACvE;IAEA,MAAM,aAAa,MAAM,kHAAA,CAAA,UAAI,CAAC,aAAa;IAE3C,IAAI;QACF,MAAM,WAAW,gBAAgB;QAEjC,8BAA8B;QAC9B,MAAM,CAAC,aAAa,GAAG,MAAM,WAAW,KAAK,CAC3C,+DACA;YAAC;SAAO;QAGV,IAAI,aAAa,MAAM,KAAK,GAAG;YAC7B,MAAM,WAAW,QAAQ;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,mEAAmE;QAEnE,0BAA0B;QAC1B,MAAM,WAAW,KAAK,CACpB,wDACA;YAAC;SAAO;QAGV,6BAA6B;QAC7B,MAAM,WAAW,KAAK,CACpB,+DACA;YAAC;SAAO;QAGV,0BAA0B;QAC1B,MAAM,WAAW,KAAK,CACpB,wDACA;YAAC;SAAO;QAGV,0CAA0C;QAC1C,MAAM,CAAC,OAAO,GAAG,MAAM,WAAW,KAAK,CACrC,gDACA;YAAC;SAAO;QAGV,MAAM,WAAW,MAAM;QAEvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,WAAW;QACb;IAEF,EAAE,OAAO,OAAO;QACd,MAAM,WAAW,QAAQ;QACzB,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB,SAAU;QACR,WAAW,OAAO;IACpB;AACF","debugId":null}}]
}