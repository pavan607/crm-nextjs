{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20org/crm/app/lib/db.js"],"sourcesContent":["// lib/db.js\r\nimport mysql from 'mysql2/promise';\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || 'root',\r\n  database: process.env.DB_NAME || 'crm',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;;AAEA,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20org/crm/app/api/fsn/generate-fsn-num/route.ts"],"sourcesContent":["// app/api/fsn/generate-fsn-num/route.ts\r\nimport { NextResponse } from 'next/server';\r\nimport db from '../../../lib/db';\r\nimport { RowDataPacket } from 'mysql2';\r\n\r\ninterface FsnRow extends RowDataPacket {\r\n  fsn_num: string;\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    const year = new Date().getFullYear();\r\n    const month = String(new Date().getMonth() + 1).padStart(2, '0');\r\n\r\n    const [rows] = await db.execute<FsnRow[]>(`\r\n      SELECT fsn_num FROM crm_fsn \r\n      WHERE fsn_num LIKE 'FSN${year}${month}%' \r\n      ORDER BY fsn_num DESC \r\n      LIMIT 1\r\n    `);\r\n\r\n    let nextNumber = 1;\r\n    if (rows.length > 0) {\r\n      const lastFsnNo = rows[0].fsn_num;\r\n      const lastNumber = parseInt(lastFsnNo.slice(-4));\r\n      nextNumber = lastNumber + 1;\r\n    }\r\n\r\n    const fsnNum = `FSN${year}${month}${String(nextNumber).padStart(4, '0')}`;\r\n\r\n    return NextResponse.json({ fsn_num: fsnNum });\r\n  } catch (error) {\r\n    console.error('Error generating FSN number:', error);\r\n    return new NextResponse('Failed to generate FSN number', { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"AAAA,wCAAwC;;;;AACxC;AACA;;;AAOO,eAAe;IACpB,IAAI;QACF,MAAM,OAAO,IAAI,OAAO,WAAW;QACnC,MAAM,QAAQ,OAAO,IAAI,OAAO,QAAQ,KAAK,GAAG,QAAQ,CAAC,GAAG;QAE5D,MAAM,CAAC,KAAK,GAAG,MAAM,kHAAA,CAAA,UAAE,CAAC,OAAO,CAAW,CAAC;;6BAElB,EAAE,OAAO,MAAM;;;IAGxC,CAAC;QAED,IAAI,aAAa;QACjB,IAAI,KAAK,MAAM,GAAG,GAAG;YACnB,MAAM,YAAY,IAAI,CAAC,EAAE,CAAC,OAAO;YACjC,MAAM,aAAa,SAAS,UAAU,KAAK,CAAC,CAAC;YAC7C,aAAa,aAAa;QAC5B;QAEA,MAAM,SAAS,CAAC,GAAG,EAAE,OAAO,QAAQ,OAAO,YAAY,QAAQ,CAAC,GAAG,MAAM;QAEzE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAO;IAC7C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,iCAAiC;YAAE,QAAQ;QAAI;IACzE;AACF","debugId":null}}]
}