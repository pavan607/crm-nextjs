{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20%282%29/crm/app/lib/db.js"],"sourcesContent":["// lib/db.js\r\nimport mysql from 'mysql2/promise';\r\n\r\nconst pool = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || 'root',\r\n  database: process.env.DB_NAME || 'crm',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0,\r\n});\r\n\r\nexport default pool;\r\n"],"names":[],"mappings":"AAAA,YAAY;;;;AACZ;;AAEA,MAAM,OAAO,mIAAA,CAAA,UAAK,CAAC,UAAU,CAAC;IAC5B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,IAAI;IAC7B,UAAU,QAAQ,GAAG,CAAC,WAAW,IAAI;IACrC,UAAU,QAAQ,GAAG,CAAC,OAAO,IAAI;IACjC,oBAAoB;IACpB,iBAAiB;IACjB,YAAY;AACd;uCAEe","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Administrator/Downloads/crm%20%282%29/crm/app/api/enquiry/add/route.ts"],"sourcesContent":["// app/api/enquiry/add/route.ts - Fixed POST method\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport pool from '../../../lib/db';\r\nimport { ResultSetHeader, RowDataPacket } from 'mysql2';\r\nimport { writeFile, mkdir } from 'fs/promises';\r\nimport path from 'path';\r\n\r\nexport async function GET() {\r\n  try {\r\n    const [rows] = await pool.query<RowDataPacket[]>(\r\n      'SELECT employee_id, employee_number, employee_first_name, employee_last_name FROM crm_employee'\r\n    );\r\n    return NextResponse.json(rows);\r\n  } catch (error) {\r\n    console.error('Error fetching employees:', error);\r\n    return NextResponse.json({ error: 'Failed to fetch employees' }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const formData = await request.formData();\r\n\r\n    const data = {\r\n      opportunityName: formData.get('opportunityName') as string,\r\n      contactName: formData.get('contactName') as string | null,\r\n      type: formData.get('type') as string | null,\r\n      leadSource: formData.get('leadSource') as string | null,\r\n      assignedTo: formData.get('assignedTo') ? Number(formData.get('assignedTo')) : null,\r\n      campaignSource: formData.get('campaignSource') as string | null,\r\n      weightedRevenue: formData.get('weightedRevenue') ? Number(formData.get('weightedRevenue')) : null,\r\n      organizationName: formData.get('organizationName') as string | null,\r\n      amount: formData.get('amount') ? Number(formData.get('amount')) : null,\r\n      expectedCloseDate: formData.get('expectedCloseDate') as string | null,\r\n      nextStep: formData.get('nextStep') as string | null,\r\n      salesStage: formData.get('salesStage') as string | null,\r\n      probability: formData.get('probability') ? Number(formData.get('probability')) : null,\r\n      description: formData.get('description') as string | null,\r\n      comment: formData.get('comment') as string | null,\r\n      createdBy: formData.get('createdBy') ? Number(formData.get('createdBy')) : null,\r\n    };\r\n\r\n    // Parse products data from the form\r\n    const productsJson = formData.get('products') as string;\r\n    const products = productsJson ? JSON.parse(productsJson) : [];\r\n\r\n    if (!data.opportunityName) {\r\n      return NextResponse.json({ error: 'Opportunity Name is required' }, { status: 400 });\r\n    }\r\n\r\n    const connection = await pool.getConnection();\r\n    try {\r\n      await connection.beginTransaction();\r\n\r\n      // Insert main enquiry record\r\n      const insertLeadSQL = `\r\n        INSERT INTO crm_enquiry\r\n          (enquiry_name, enquiry_contact_name, enquiry_type, enquiry_source, enquiry_assigned_to, enquiry_campaign_source,\r\n           enquiry_weighted_revenue, enquiry_organization_name, enquiry_amount, enquiry_expected_close_date, enquiry_next_step,\r\n           enquiry_sales_stage, enquiry_probability, enquiry_description, enquiry_created_on, enquiry_created_by, enquiry_modified_on, enquiry_modified_by)\r\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), ?, NULL, NULL)\r\n      `;\r\n\r\n      const leadValues = [\r\n        data.opportunityName,\r\n        data.contactName,\r\n        data.type,\r\n        data.leadSource,\r\n        data.assignedTo,\r\n        data.campaignSource,\r\n        data.weightedRevenue,\r\n        data.organizationName,\r\n        data.amount,\r\n        // Convert empty string to null for date field\r\n        data.expectedCloseDate && data.expectedCloseDate.trim() !== '' ? data.expectedCloseDate : null,\r\n        data.nextStep,\r\n        data.salesStage,\r\n        data.probability,\r\n        data.description,\r\n        data.createdBy,\r\n      ];\r\n\r\n      const [leadResult] = await connection.execute<ResultSetHeader>(insertLeadSQL, leadValues);\r\n      const enquiryId = leadResult.insertId;\r\n\r\n      // Save comment if present\r\n      if (data.comment) {\r\n        await connection.execute(\r\n          `INSERT INTO crm_enquiry_comment (enquiry_id, enquiry_comment_text, enquiry_comment_commented_on, enquiry_comment_commented_by)\r\n           VALUES (?, ?, NOW(), ?)`,\r\n          [enquiryId, data.comment, data.createdBy]\r\n        );\r\n      }\r\n\r\n      // Save attachments\r\n      const files = formData.getAll('attachments') as File[];\r\n      if (files.length > 0) {\r\n        const uploadDir = path.join(process.cwd(), 'public', 'uploads');\r\n        await mkdir(uploadDir, { recursive: true });\r\n\r\n        for (const file of files) {\r\n          const arrayBuffer = await file.arrayBuffer();\r\n          const buffer = Buffer.from(arrayBuffer);\r\n\r\n          const fileName = `${Date.now()}-${file.name}`;\r\n          const filePath = path.join(uploadDir, fileName);\r\n\r\n          await writeFile(filePath, buffer);\r\n\r\n          await connection.execute(\r\n            `INSERT INTO crm_enquiry_attachment (enquiry_id, enquiry_attachment_file_name, enquiry_attachment_file_path, enquiry_attachment_uploaded_on, enquiry_attachment_uploaded_by)\r\n             VALUES (?, ?, ?, NOW(), ?)`,\r\n            [enquiryId, file.name, `/uploads/${fileName}`, data.createdBy]\r\n          );\r\n        }\r\n      }\r\n\r\n      // âœ… FIXED: Save multiple products with correct property names and null checks\r\n      if (products && products.length > 0) {\r\n        for (const product of products) {\r\n          // Validate that required fields are present and not undefined\r\n          const productId = product.product_id;\r\n          const quantity = product.enquiry_product_quantity;\r\n          const price = product.enquiry_product_price;\r\n\r\n          if (productId === undefined || quantity === undefined || price === undefined) {\r\n            console.error('Product data contains undefined values:', { productId, quantity, price });\r\n            throw new Error('Product data is incomplete - contains undefined values');\r\n          }\r\n\r\n          await connection.execute(\r\n            `INSERT INTO crm_enquiry_product (enquiry_id, product_id, enquiry_product_quantity, enquiry_product_price, enquiry_product_created_on, enquiry_product_modified_on)\r\n             VALUES (?, ?, ?, ?, NOW(), NULL)`,\r\n            [enquiryId, productId, quantity, price]\r\n          );\r\n        }\r\n      }\r\n\r\n      await connection.commit();\r\n      connection.release();\r\n\r\n      return NextResponse.json({\r\n        message: 'Enquiry created successfully',\r\n        leadId: enquiryId,\r\n      });\r\n    } catch (err) {\r\n      await connection.rollback();\r\n      connection.release();\r\n      console.error('Transaction failed:', err);\r\n      return NextResponse.json({ error: 'Failed to create lead' }, { status: 500 });\r\n    }\r\n  } catch (error) {\r\n    console.error('Error handling request:', error);\r\n    return NextResponse.json({ error: 'Unexpected server error' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}